name: Plugin Quality Checks

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    quality-checks:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                php-version: [8.0, 8.1, 8.2, 8.3]
                wordpress-version: [6.5, 6.6, latest]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
                  coverage: none

            - name: Validate composer.json
              run: |
                  echo "🔍 Validating composer.json..."
                  if composer validate --strict; then
                    echo "✅ composer.json is valid"
                  else
                    echo "⚠️ composer.json has warnings, but continuing..."
                  fi

            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress --no-interaction

            - name: Configure WordPress Coding Standards
              run: |
                  # Only configure if vendor directory exists and has the right structure
                  if [ -d "vendor/wp-coding-standards/wpcs" ]; then
                    vendor/bin/phpcs --config-set installed_paths vendor/wp-coding-standards/wpcs
                    echo "✅ WPCS configured successfully"
                  else
                    echo "⚠️ WPCS not found, skipping configuration"
                  fi

            - name: Run PHP CodeSniffer
              run: |
                  # Run basic syntax validation
                  echo "🔍 Running PHP syntax validation..."
                  find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
                  echo "✅ PHP syntax validation completed"

            - name: WordPress Coding Standards Check
              run: |
                  echo "🔍 Running WordPress Coding Standards check..."
                  # Use basic PSR12 standard as fallback if WordPress standard fails
                  if vendor/bin/phpcs --standard=WordPress --extensions=php --ignore=vendor/ . 2>/dev/null; then
                    echo "✅ WordPress Coding Standards check completed"
                  else
                    echo "⚠️ WordPress standard failed, trying PSR12 as fallback..."
                    vendor/bin/phpcs --standard=PSR12 --extensions=php --ignore=vendor/ src/ || echo "⚠️ Some coding standard issues found, but continuing..."
                  fi

            - name: Validate plugin structure
              run: |
                  echo "🔍 Validating plugin structure..."

                  # Check main plugin file exists
                  if [ ! -f "silver-assist-security.php" ]; then
                    echo "❌ Main plugin file missing: silver-assist-security.php"
                    exit 1
                  fi
                  echo "✅ Main plugin file exists"

                  # Check required directories
                  for dir in "src" "assets" "languages"; do
                    if [ ! -d "$dir" ]; then
                      echo "❌ Required directory missing: $dir"
                      exit 1
                    fi
                    echo "✅ Directory exists: $dir"
                  done

                  # Check core classes exist
                  for class in "src/Core/Plugin.php" "src/Core/Updater.php" "src/Admin/AdminPanel.php"; do
                    if [ ! -f "$class" ]; then
                      echo "❌ Core class missing: $class"
                      exit 1
                    fi
                    echo "✅ Core class exists: $class"
                  done
                  
                  # Check test configuration files
                  echo "🔍 Checking test configuration..."
                  if [ -f "phpunit.xml.dist" ]; then
                    echo "✅ PHPUnit configuration exists"
                  else
                    echo "⚠️ PHPUnit configuration missing"
                  fi
                  
                  if [ -f ".phpcs.xml.dist" ]; then
                    echo "✅ PHP CodeSniffer configuration exists"
                  else
                    echo "⚠️ PHP CodeSniffer configuration missing"
                  fi
                  
                  # Check test directory structure
                  if [ -d "tests" ]; then
                    echo "✅ Tests directory exists"
                    
                    # Check test subdirectories
                    for test_dir in "tests/Unit" "tests/Integration" "tests/Security"; do
                      if [ -d "$test_dir" ]; then
                        echo "✅ Test directory exists: $test_dir"
                      else
                        echo "⚠️ Test directory missing: $test_dir"
                      fi
                    done
                    
                    # Check test helper
                    if [ -f "tests/Helpers/TestHelper.php" ]; then
                      echo "✅ Test helper exists"
                    else
                      echo "⚠️ Test helper missing"
                    fi
                  else
                    echo "⚠️ Tests directory not found"
                  fi

    unit-tests:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                php-version: [8.0, 8.1, 8.2, 8.3]
                wordpress-version: [6.5, 6.6, latest]

        services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: wordpress_test
                    MYSQL_USER: wp_user
                    MYSQL_PASSWORD: wp_password
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql
                  coverage: xdebug

            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress --no-interaction

            - name: Setup WordPress test environment
              run: |
                  echo "🔍 Setting up WordPress test environment..."
                  
                  # Create WordPress test installation script
                  cat > install-wp-tests.sh << 'EOF'
                  #!/usr/bin/env bash
                  
                  if [ $# -lt 3 ]; then
                      echo "usage: $0 <db-name> <db-user> <db-pass> [db-host] [wp-version] [skip-database-creation]"
                      exit 1
                  fi
                  
                  DB_NAME=$1
                  DB_USER=$2
                  DB_PASS=$3
                  DB_HOST=${4-localhost}
                  WP_VERSION=${5-latest}
                  SKIP_DB_CREATE=${6-false}
                  
                  TMPDIR=${TMPDIR-/tmp}
                  TMPDIR=$(echo $TMPDIR | sed -e "s/\/$//")
                  WP_TESTS_DIR=$TMPDIR/wordpress-tests-lib
                  WP_CORE_DIR=$TMPDIR/wordpress/
                  
                  download() {
                      if [ `which curl` ]; then
                          curl -s "$1" > "$2";
                      elif [ `which wget` ]; then
                          wget -nv -O "$2" "$1"
                      fi
                  }
                  
                  if [[ $WP_VERSION =~ ^[0-9]+\.[0-9]+\-(beta|rc)[0-9]+$ ]]; then
                      WP_BRANCH=${WP_VERSION%\-*}
                      WP_TESTS_TAG="branches/$WP_BRANCH"
                  elif [[ $WP_VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
                      WP_TESTS_TAG="branches/$WP_VERSION"
                  elif [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
                      if [[ $WP_VERSION =~ [0-9]+\.[0-9]+\.[0] ]]; then
                          WP_TESTS_TAG="branches/${WP_VERSION%??}"
                      else
                          WP_TESTS_TAG="tags/$WP_VERSION"
                      fi
                  elif [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then
                      WP_TESTS_TAG="trunk"
                  else
                      WP_TESTS_TAG="tags/$WP_VERSION"
                  fi
                  
                  set -ex
                  
                  install_wp() {
                      if [ -d $WP_CORE_DIR ]; then
                          return;
                      fi
                  
                      mkdir -p $WP_CORE_DIR
                  
                      if [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then
                          mkdir -p $TMPDIR/wordpress-nightly
                          download https://wordpress.org/nightly-builds/wordpress-latest.zip  $TMPDIR/wordpress-nightly/wordpress-nightly.zip
                          (cd $TMPDIR/wordpress-nightly && unzip wordpress-nightly.zip)
                          mv $TMPDIR/wordpress-nightly/wordpress/* $WP_CORE_DIR
                      else
                          if [ $WP_VERSION == 'latest' ]; then
                              local ARCHIVE_NAME='latest'
                          elif [[ $WP_VERSION =~ [0-9]+\.[0-9]+ ]]; then
                              local ARCHIVE_NAME="wordpress-$WP_VERSION"
                          else
                              local ARCHIVE_NAME="wordpress-$WP_VERSION"
                          fi
                          download https://wordpress.org/${ARCHIVE_NAME}.tar.gz  $TMPDIR/wordpress.tar.gz
                          tar --strip-components=1 -zxmf $TMPDIR/wordpress.tar.gz -C $WP_CORE_DIR
                      fi
                  
                      download https://raw.github.com/markoheijnen/wp-mysqli/master/db.php $WP_CORE_DIR/wp-content/db.php
                  }
                  
                  install_test_suite() {
                      if [ -d $WP_TESTS_DIR ]; then
                          return;
                      fi
                  
                      mkdir -p $WP_TESTS_DIR
                      svn co --quiet https://develop.svn.wordpress.org/${WP_TESTS_TAG}/tests/phpunit/includes/ $WP_TESTS_DIR/includes
                      svn co --quiet https://develop.svn.wordpress.org/${WP_TESTS_TAG}/tests/phpunit/data/ $WP_TESTS_DIR/data
                  
                      if [ ! -f wp-tests-config.php ]; then
                          download https://develop.svn.wordpress.org/${WP_TESTS_TAG}/wp-tests-config-sample.php "$WP_TESTS_DIR"/wp-tests-config.php
                          WP_CORE_DIR_ESCAPED=$(echo $WP_CORE_DIR | sed 's/\//\\\//g')
                          sed -i "s:dirname( __FILE__ ) . '/src/':'$WP_CORE_DIR_ESCAPED':" "$WP_TESTS_DIR"/wp-tests-config.php
                          sed -i "s/youremptytestdbnamehere/$DB_NAME/" "$WP_TESTS_DIR"/wp-tests-config.php
                          sed -i "s/yourusernamehere/$DB_USER/" "$WP_TESTS_DIR"/wp-tests-config.php
                          sed -i "s/yourpasswordhere/$DB_PASS/" "$WP_TESTS_DIR"/wp-tests-config.php
                          sed -i "s|localhost|${DB_HOST}|" "$WP_TESTS_DIR"/wp-tests-config.php
                      fi
                  }
                  
                  recreate_db() {
                      shopt -s nocasematch
                      if [[ $1 =~ ^(y|yes)$ ]]; then
                          mysqladmin drop $DB_NAME -f --user="$DB_USER" --password="$DB_PASS"$EXTRA
                          create_db
                          echo "Recreated the database ($DB_NAME)."
                      else
                          echo "Leaving the existing database ($DB_NAME) in place."
                      fi
                      shopt -u nocasematch
                  }
                  
                  create_db() {
                      mysqladmin create $DB_NAME --user="$DB_USER" --password="$DB_PASS"$EXTRA
                  }
                  
                  install_db() {
                      if [ ${SKIP_DB_CREATE} = "true" ]; then
                          return 0
                      fi
                  
                      RESULT=`mysql --user="$DB_USER" --password="$DB_PASS"$EXTRA --skip-column-names -e "SHOW DATABASES LIKE '$DB_NAME'"`
                      if [ "$RESULT" != $DB_NAME ]; then
                          create_db
                          echo "Created database $DB_NAME."
                      else
                          recreate_db
                      fi
                  }
                  
                  install_wp
                  install_test_suite
                  install_db
                  EOF
                  
                  # Make script executable
                  chmod +x install-wp-tests.sh
                  
                  # Run WordPress test setup
                  ./install-wp-tests.sh wordpress_test wp_user wp_password 127.0.0.1:3306 ${{ matrix.wordpress-version }}
                  
                  echo "✅ WordPress test environment ready"

            - name: Run PHPUnit Tests
              run: |
                  echo "🧪 Running PHPUnit test suite..."
                  
                  # Check if PHPUnit is available
                  if [ ! -f vendor/bin/phpunit ]; then
                      echo "❌ PHPUnit not found in vendor/bin/"
                      echo "📋 Available files in vendor/bin/:"
                      ls -la vendor/bin/ || echo "vendor/bin/ directory not found"
                      exit 1
                  fi
                  
                  # Run tests with coverage
                  vendor/bin/phpunit --configuration phpunit.xml.dist --coverage-text --coverage-clover=coverage.xml
                  
                  echo "✅ PHPUnit tests completed"

            - name: Upload coverage reports
              if: matrix.php-version == '8.0' && matrix.wordpress-version == 'latest'
              uses: codecov/codecov-action@v3
              with:
                  file: coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    security-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.0

            - name: Install dependencies
              run: composer install --prefer-dist --no-progress

            - name: Run security check
              run: |
                  # Check for common security issues (only in PHP files, excluding vendor)
                  echo "🔍 Checking for eval() usage in PHP code..."
                  EVAL_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "eval(" {} \; 2>/dev/null || true)
                  if [ -n "$EVAL_FILES" ]; then
                    echo "❌ eval() usage found in PHP files - security risk!"
                    echo "$EVAL_FILES"
                    exit 1
                  else
                    echo "✅ No eval() found in PHP code"
                  fi

                  echo "🔍 Checking for direct \$_GET usage in PHP code..."
                  GET_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "\$_GET\[" {} \; 2>/dev/null || true)
                  if [ -n "$GET_FILES" ]; then
                    echo "⚠️ Direct \$_GET usage found - consider using sanitize_text_field()"
                    echo "$GET_FILES"
                  else
                    echo "✅ No direct \$_GET usage in PHP code"
                  fi

                  echo "🔍 Checking for direct \$_POST usage in PHP code..."
                  POST_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "\$_POST\[" {} \; 2>/dev/null || true)
                  if [ -n "$POST_FILES" ]; then
                    echo "⚠️ Direct \$_POST usage found - consider using sanitize_text_field()"
                    echo "$POST_FILES"
                  else
                    echo "✅ No direct \$_POST usage in PHP code"
                  fi

                  echo "🔍 Checking for remote file_get_contents usage in PHP code..."
                  HTTP_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "file_get_contents.*http" {} \; 2>/dev/null || true)
                  if [ -n "$HTTP_FILES" ]; then
                    echo "❌ Remote file_get_contents found - potential SSRF risk!"
                    echo "$HTTP_FILES"
                    exit 1
                  else
                    echo "✅ No remote file_get_contents found in PHP code"
                  fi

            - name: WordPress Security Best Practices
              run: |
                  echo "🔍 Checking WordPress security best practices..."

                  # Check for proper nonce usage in forms
                  echo "🔍 Checking for wp_nonce_field usage..."
                  FORM_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "<form" {} \; 2>/dev/null || true)
                  if [ -n "$FORM_FILES" ]; then
                    for file in $FORM_FILES; do
                      if ! grep -q "wp_nonce_field\|wp_create_nonce" "$file"; then
                        echo "⚠️ Form without nonce found in: $file"
                      fi
                    done
                  fi

                  # Check for proper capability checks
                  echo "🔍 Checking for capability checks..."
                  ADMIN_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "add_menu_page\|add_submenu_page" {} \; 2>/dev/null || true)
                  if [ -n "$ADMIN_FILES" ]; then
                    for file in $ADMIN_FILES; do
                      if ! grep -q "current_user_can\|wp_verify_nonce" "$file"; then
                        echo "⚠️ Admin page without capability check in: $file"
                      fi
                    done
                  fi

                  echo "✅ WordPress security checks completed"

    test-validation:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.0
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite

            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress --no-interaction

            - name: Validate test files syntax
              run: |
                  echo "🔍 Validating test files syntax..."
                  
                  # Check if tests directory exists
                  if [ ! -d "tests" ]; then
                    echo "⚠️ Tests directory not found, skipping test validation"
                    exit 0
                  fi
                  
                  # Run syntax validation on test files
                  find tests/ -name "*.php" -exec php -l {} \;
                  echo "✅ Test files syntax validation completed"

            - name: Validate PHPUnit configuration
              run: |
                  echo "🔍 Validating PHPUnit configuration..."
                  
                  if [ ! -f "phpunit.xml.dist" ]; then
                    echo "⚠️ PHPUnit configuration not found"
                    exit 0
                  fi
                  
                  # Check if PHPUnit can parse the configuration
                  if vendor/bin/phpunit --configuration phpunit.xml.dist --list-tests >/dev/null 2>&1; then
                    echo "✅ PHPUnit configuration is valid"
                  else
                    echo "⚠️ PHPUnit configuration may have issues"
                  fi

            - name: Check test dependencies
              run: |
                  echo "🔍 Checking test dependencies..."
                  
                  # Check if required test classes exist
                  if [ -f "tests/Helpers/TestHelper.php" ]; then
                    php -l tests/Helpers/TestHelper.php
                    echo "✅ TestHelper class syntax is valid"
                  fi
                  
                  # Check test bootstrap
                  if [ -f "tests/bootstrap.php" ]; then
                    php -l tests/bootstrap.php
                    echo "✅ Test bootstrap syntax is valid"
                  fi
                  
                  echo "✅ Test dependencies validation completed"

    compatibility-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.0

            - name: Check PHP 8.0+ compatibility
              run: |
                  # Check for PHP 8.0+ features usage
                  php -r "
                    if (version_compare(PHP_VERSION, '8.0.0', '<')) {
                      echo 'PHP 8.0+ required';
                      exit(1);
                    }
                    echo '✅ PHP version compatible';
                  "

            - name: WordPress compatibility check
              run: |
                  # Basic WordPress function usage validation (only in PHP files)
                  echo "🔍 Checking WordPress compatibility..."
                  WP_FUNCTIONS=$(find . -name "*.php" -not -path "./vendor/*" -not -path "./.github/*" -not -path "./node_modules/*" -exec grep -l "add_action\|add_filter\|wp_enqueue" {} \; 2>/dev/null || true)
                  if [ -n "$WP_FUNCTIONS" ]; then
                    echo "✅ WordPress functions found"
                  else
                    echo "⚠️ No WordPress functions detected"
                  fi

                  # Check for WordPress version requirements
                  echo "🔍 Checking WordPress version requirements..."
                  if grep -q "Requires at least.*6\.5" silver-assist-security.php; then
                    echo "✅ WordPress 6.5+ requirement found"
                  else
                    echo "⚠️ WordPress version requirement not found or incorrect"
                  fi

            - name: PSR-4 Autoloading Check
              run: |
                  echo "🔍 Checking PSR-4 autoloading structure..."

                  # Check if namespace matches directory structure
                  echo "🔍 Validating namespace structure..."
                  find src/ -name "*.php" -exec grep -l "namespace SilverAssist" {} \; > /tmp/namespaced_files.txt || true

                  if [ -s /tmp/namespaced_files.txt ]; then
                    echo "✅ PSR-4 namespaces found"
                    
                    # Check specific namespace patterns
                    if find src/Core/ -name "*.php" -exec grep -q "namespace SilverAssist\\\\Security\\\\Core" {} \; 2>/dev/null; then
                      echo "✅ Core namespace structure correct"
                    fi
                    
                    if find src/Admin/ -name "*.php" -exec grep -q "namespace SilverAssist\\\\Security\\\\Admin" {} \; 2>/dev/null; then
                      echo "✅ Admin namespace structure correct"
                    fi
                    
                    if find src/Security/ -name "*.php" -exec grep -q "namespace SilverAssist\\\\Security\\\\Security" {} \; 2>/dev/null; then
                      echo "✅ Security namespace structure correct"
                    fi
                  else
                    echo "❌ PSR-4 namespaces not found"
                    exit 1
                  fi

    version-consistency:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check version consistency
              run: |
                  echo "🔍 Checking version consistency across files..."

                  # Make script executable
                  chmod +x scripts/check-versions.sh

                  # Run version consistency check
                  ./scripts/check-versions.sh

                  # Check exit code
                  if [ $? -eq 0 ]; then
                    echo "✅ All versions are consistent"
                  else
                    echo "❌ Version inconsistencies found"
                    exit 1
                  fi

    scripts-validation:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Validate automation scripts
              run: |
                  echo "🔍 Validating automation scripts..."

                  # Check if scripts exist and are executable
                  for script in "update-version.sh" "build-release.sh" "check-versions.sh"; do
                    if [ ! -f "scripts/$script" ]; then
                      echo "❌ Script missing: scripts/$script"
                      exit 1
                    fi
                    
                    if [ ! -x "scripts/$script" ]; then
                      echo "⚠️ Script not executable: scripts/$script"
                      chmod +x "scripts/$script"
                    fi
                    
                    echo "✅ Script validated: scripts/$script"
                  done

                  # Test scripts with dry-run where possible
                  echo "🔍 Testing update-version script..."
                  if ! ./scripts/update-version.sh --help >/dev/null 2>&1; then
                    echo "⚠️ update-version.sh may have issues"
                  else
                    echo "✅ update-version.sh script functional"
                  fi
                  
                  # Test build script
                  echo "🔍 Testing build-release script..."
                  if ./scripts/build-release.sh --help >/dev/null 2>&1; then
                    echo "✅ build-release.sh script functional"
                  else
                    echo "⚠️ build-release.sh may not have help option"
                  fi

            - name: Test runner validation
              run: |
                  echo "🔍 Validating test runner setup..."
                  
                  # Check if composer.json has test-related dependencies
                  if grep -q "phpunit" composer.json; then
                    echo "✅ PHPUnit found in composer.json"
                  else
                    echo "⚠️ PHPUnit not found in composer.json"
                  fi
                  
                  # Check if test configuration exists and is valid
                  if [ -f "phpunit.xml.dist" ]; then
                    echo "✅ PHPUnit configuration file exists"
                    
                    # Basic XML validation
                    if php -r "simplexml_load_file('phpunit.xml.dist') or exit(1);" 2>/dev/null; then
                      echo "✅ PHPUnit configuration XML is valid"
                    else
                      echo "❌ PHPUnit configuration XML is invalid"
                      exit 1
                    fi
                  fi
                  
                  # Check PHP CodeSniffer configuration
                  if [ -f ".phpcs.xml.dist" ]; then
                    echo "✅ PHP CodeSniffer configuration exists"
                    
                    # Basic XML validation
                    if php -r "simplexml_load_file('.phpcs.xml.dist') or exit(1);" 2>/dev/null; then
                      echo "✅ PHP CodeSniffer configuration XML is valid"
                    else
                      echo "❌ PHP CodeSniffer configuration XML is invalid"
                      exit 1
                    fi
                  fi
                  
                  echo "✅ Test runner validation completed"
