name: Plugin Quality Checks

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    # Unified quality checks using centralized script
    unified-quality-checks:
        name: Quality Checks (PHP ${{ matrix.php-version }}, WP ${{ matrix.wordpress-version }})
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                php-version: [8.2]
                wordpress-version: [6.5, 6.6, latest]

        services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: wordpress_test
                ports:
                    - 3306:3306
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_mysql, mysqli
                  coverage: none
                  tools: composer:v2

            - name: Install system dependencies
              run: |
                  echo "Installing system dependencies..."
                  sudo apt-get update
                  sudo apt-get install -y subversion mysql-client
                  echo "System dependencies installed"

            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-php${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php${{ matrix.php-version }}-composer-
                      ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

            - name: Verify MySQL connection
              run: |
                  echo "Verifying MySQL connection..."
                  mysql --host=127.0.0.1 --port=3306 -uroot -proot -e "SELECT VERSION();"
                  echo "MySQL connection verified"

            - name: Install WordPress Test Suite
              env:
                  WP_VERSION: ${{ matrix.wordpress-version }}
              run: |
                  echo "Installing WordPress Test Suite..."
                  echo "WordPress Version: $WP_VERSION"
                  echo "PHP Version: ${{ matrix.php-version }}"
                  
                  # Make script executable
                  chmod +x scripts/install-wp-tests.sh
                  
                  # Install WordPress test suite (non-interactive mode)
                  bash scripts/install-wp-tests.sh wordpress_test root root 127.0.0.1 $WP_VERSION
                  
                  # Verify installation
                  if [ -f "/tmp/wordpress-tests-lib/includes/functions.php" ]; then
                    echo "✅ WordPress Test Suite installed successfully"
                  else
                    echo "❌ WordPress Test Suite installation failed"
                    exit 1
                  fi

            - name: 🔧 Run Unified Quality Checks Script
              run: |
                  chmod +x scripts/run-quality-checks.sh
                  ./scripts/run-quality-checks.sh --verbose

            - name: 📊 Upload Test Results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-php${{ matrix.php-version }}-wp${{ matrix.wordpress-version }}
                  path: |
                      tests/results/
                      coverage/
                  retention-days: 30

    # ===================================
    # ✅ Syntax Validation (Fast Check)
    # ===================================
    syntax-validation:
        runs-on: ubuntu-latest
        
        # Fast syntax validation without WordPress environment
        strategy:
            fail-fast: false
            matrix:
                php-version: [8.2]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  extensions: dom, curl, libxml, mbstring, zip
                  coverage: none
                  tools: composer:v2

            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-php${{ matrix.php-version }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php${{ matrix.php-version }}-composer-
                      ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: |
                  echo "Installing Composer dependencies for PHP ${{ matrix.php-version }}..."
                  composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
                  echo "Composer dependencies installed"

            - name: PHP syntax validation
              run: |
                  echo "Running comprehensive PHP syntax validation with PHP ${{ matrix.php-version }}..."
                  
                  # Test all PHP files syntax including test files
                  find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
                  
                  echo "✅ PHP syntax validation completed for PHP ${{ matrix.php-version }}"

            - name: Autoloading validation
              run: |
                  echo "Validating PSR-4 autoloading..."
                  
                  php -r "
                  require_once 'vendor/autoload.php';
                  echo 'Autoloader loaded successfully' . PHP_EOL;
                  "
                  
                  echo "✅ Autoloading validated for PHP ${{ matrix.php-version }}"

    security-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.2
                  tools: composer:v2

            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-composer-security-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-composer-security-
                      ${{ runner.os }}-composer-

            - name: Install dependencies
              run: |
                  echo "Installing dependencies..."
                  composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
                  echo "Dependencies installed"

            - name: Run security check
              run: |
                  # Check for common security issues (only in PHP files, excluding vendor)
                  echo "Checking for eval() usage in PHP code..."
                  # Use word boundary \b to match only eval( as a function call, not within other words like retrieval(
                  EVAL_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -lE '\beval\s*\(' {} \; 2>/dev/null || true)
                  if [ -n "$EVAL_FILES" ]; then
                    echo "eval() usage found in PHP files - security risk!"
                    echo "$EVAL_FILES"
                    exit 1
                  else
                    echo "No eval() found in PHP code"
                  fi

                  echo "Checking for direct \$_GET usage in PHP code..."
                  GET_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "\$_GET\[" {} \; 2>/dev/null || true)
                  if [ -n "$GET_FILES" ]; then
                    echo "Direct \$_GET usage found - consider using sanitize_text_field()"
                    echo "$GET_FILES"
                  else
                    echo "No direct \$_GET usage in PHP code"
                  fi

                  echo "Checking for direct \$_POST usage in PHP code..."
                  POST_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "\$_POST\[" {} \; 2>/dev/null || true)
                  if [ -n "$POST_FILES" ]; then
                    echo "Direct \$_POST usage found - consider using sanitize_text_field()"
                    echo "$POST_FILES"
                  else
                    echo "No direct \$_POST usage in PHP code"
                  fi

                  echo "Checking for remote file_get_contents usage in PHP code..."
                  HTTP_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "file_get_contents.*http" {} \; 2>/dev/null || true)
                  if [ -n "$HTTP_FILES" ]; then
                    echo "Remote file_get_contents found - potential SSRF risk!"
                    echo "$HTTP_FILES"
                    exit 1
                  else
                    echo "No remote file_get_contents found in PHP code"
                  fi

            - name: WordPress Security Best Practices
              run: |
                  echo "Checking WordPress security best practices..."

                  # Check for proper nonce usage in forms
                  echo "Checking for wp_nonce_field usage..."
                  FORM_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "<form" {} \; 2>/dev/null || true)
                  if [ -n "$FORM_FILES" ]; then
                    for file in $FORM_FILES; do
                      if ! grep -q "wp_nonce_field\|wp_create_nonce" "$file"; then
                        echo "Form without nonce found in: $file"
                      fi
                    done
                  fi

                  # Check for proper capability checks
                  echo "Checking for capability checks..."
                  ADMIN_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "add_menu_page\|add_submenu_page" {} \; 2>/dev/null || true)
                  if [ -n "$ADMIN_FILES" ]; then
                    for file in $ADMIN_FILES; do
                      if ! grep -q "current_user_can\|wp_verify_nonce" "$file"; then
                        echo "Admin page without capability check in: $file"
                      fi
                    done
                  fi

                  echo "WordPress security checks completed"

    test-validation:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.2
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
                  tools: composer:v2

            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-composer-test-validation-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-composer-test-validation-
                      ${{ runner.os }}-composer-

            - name: Install Composer dependencies
              run: |
                  echo "Installing Composer dependencies..."
                  composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader
                  echo "Composer dependencies installed"

            - name: Validate test files syntax
              run: |
                  echo "Validating test files syntax..."
                  
                  # Check if tests directory exists
                  if [ ! -d "tests" ]; then
                    echo "Tests directory not found, skipping test validation"
                    exit 0
                  fi
                  
                  # Run syntax validation on test files
                  find tests/ -name "*.php" -exec php -l {} \;
                  echo "Test files syntax validation completed"

            - name: Validate PHPUnit configuration
              run: |
                  echo "Validating PHPUnit configuration..."
                  
                  if [ ! -f "phpunit.xml.dist" ]; then
                    echo "PHPUnit configuration not found"
                    exit 0
                  fi
                  
                  # Check if PHPUnit can parse the configuration
                  if vendor/bin/phpunit --configuration phpunit.xml.dist --list-tests >/dev/null 2>&1; then
                    echo "PHPUnit configuration is valid"
                  else
                    echo "PHPUnit configuration may have issues"
                  fi

            - name: Check test dependencies
              run: |
                  echo "Checking test dependencies..."
                  
                  # Check if required test classes exist
                  if [ -f "tests/Helpers/TestHelper.php" ]; then
                    php -l tests/Helpers/TestHelper.php
                    echo "TestHelper class syntax is valid"
                  fi
                  
                  # Check test bootstrap
                  if [ -f "tests/bootstrap.php" ]; then
                    php -l tests/bootstrap.php
                    echo "Test bootstrap syntax is valid"
                  fi
                  
                  echo "Test dependencies validation completed"

    compatibility-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.0

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.2

            - name: Check PHP 8.2+ compatibility
              run: |
                  # Check for PHP 8.2+ features usage
                  php -r "
                    if (version_compare(PHP_VERSION, '8.2.0', '<')) {
                      echo 'PHP 8.2+ required';
                      exit(1);
                    }
                    echo 'PHP version compatible';
                  "

            - name: WordPress compatibility check
              run: |
                  # Basic WordPress function usage validation (only in PHP files)
                  echo "Checking WordPress compatibility..."
                  WP_FUNCTIONS=$(find . -name "*.php" -not -path "./vendor/*" -not -path "./.github/*" -not -path "./node_modules/*" -exec grep -l "add_action\|add_filter\|wp_enqueue" {} \; 2>/dev/null || true)
                  if [ -n "$WP_FUNCTIONS" ]; then
                    echo "WordPress functions found"
                  else
                    echo "No WordPress functions detected"
                  fi

                  # Check for WordPress version requirements
                  echo "Checking WordPress version requirements..."
                  if grep -q "Requires at least.*6\.5" silver-assist-security.php; then
                    echo "WordPress 6.5+ requirement found"
                  else
                    echo "WordPress version requirement not found or incorrect"
                  fi

            - name: PSR-4 Autoloading Check
              run: |
                  echo "Checking PSR-4 autoloading structure..."

                  # Check if namespace matches directory structure
                  echo "Validating namespace structure..."
                  find src/ -name "*.php" -exec grep -l "namespace SilverAssist" {} \; > /tmp/namespaced_files.txt || true

                  if [ -s /tmp/namespaced_files.txt ]; then
                    echo "PSR-4 namespaces found"
                    
                    # Check specific namespace patterns
                    if find src/Core/ -name "*.php" -exec grep -q "namespace SilverAssist\\\\Security\\\\Core" {} \; 2>/dev/null; then
                      echo "Core namespace structure correct"
                    fi
                    
                    if find src/Admin/ -name "*.php" -exec grep -q "namespace SilverAssist\\\\Security\\\\Admin" {} \; 2>/dev/null; then
                      echo "Admin namespace structure correct"
                    fi
                    
                    if find src/Security/ -name "*.php" -exec grep -q "namespace SilverAssist\\\\Security\\\\Security" {} \; 2>/dev/null; then
                      echo "Security namespace structure correct"
                    fi
                  else
                    echo "PSR-4 namespaces not found"
                    exit 1
                  fi

    version-consistency:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Check version consistency
              run: |
                  echo "Checking version consistency across files..."

                  # Make script executable
                  chmod +x scripts/check-versions.sh

                  # Run version consistency check
                  ./scripts/check-versions.sh

                  # Check exit code
                  if [ $? -eq 0 ]; then
                    echo "All versions are consistent"
                  else
                    echo "Version inconsistencies found"
                    exit 1
                  fi

    scripts-validation:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Validate automation scripts
              run: |
                  echo "Validating automation scripts..."

                  # Check if scripts exist and are executable
                  for script in "update-version-simple.sh" "build-release.sh" "check-versions.sh"; do
                    if [ ! -f "scripts/$script" ]; then
                      echo "Script missing: scripts/$script"
                      exit 1
                    fi
                    
                    if [ ! -x "scripts/$script" ]; then
                      echo "Script not executable: scripts/$script"
                      chmod +x "scripts/$script"
                    fi
                    
                    echo "Script validated: scripts/$script"
                  done

                  # Test scripts with dry-run where possible
                  echo "Testing update-version script..."
                  if ! ./scripts/update-version-simple.sh --help >/dev/null 2>&1; then
                    echo "update-version-simple.sh may have issues"
                  else
                    echo "update-version-simple.sh script functional"
                  fi
                  
                  # Test build script
                  echo "Testing build-release script..."
                  if ./scripts/build-release.sh --help >/dev/null 2>&1; then
                    echo "build-release.sh script functional"
                  else
                    echo "build-release.sh may not have help option"
                  fi

            - name: Test runner validation
              run: |
                  echo "Validating test runner setup..."
                  
                  # Check if composer.json has test-related dependencies
                  if grep -q "phpunit" composer.json; then
                    echo "PHPUnit found in composer.json"
                  else
                    echo "PHPUnit not found in composer.json"
                  fi
                  
                  # Check if test configuration exists and is valid
                  if [ -f "phpunit.xml.dist" ]; then
                    echo "PHPUnit configuration file exists"
                    
                    # Basic XML validation
                    if php -r "simplexml_load_file('phpunit.xml.dist') or exit(1);" 2>/dev/null; then
                      echo "PHPUnit configuration XML is valid"
                    else
                      echo "PHPUnit configuration XML is invalid"
                      exit 1
                    fi
                  fi
                  
                  # Check PHP CodeSniffer configuration
                  if [ -f ".phpcs.xml.dist" ]; then
                    echo "PHP CodeSniffer configuration exists"
                    
                    # Basic XML validation
                    if php -r "simplexml_load_file('.phpcs.xml.dist') or exit(1);" 2>/dev/null; then
                      echo "PHP CodeSniffer configuration XML is valid"
                    else
                      echo "PHP CodeSniffer configuration XML is invalid"
                      exit 1
                    fi
                  fi
                  
                  echo "Test runner validation completed"
