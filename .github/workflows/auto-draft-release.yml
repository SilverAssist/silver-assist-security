# Automatic Weekly Draft Release Workflow
#
# This workflow creates/updates draft releases automatically on a weekly schedule,
# consolidating all dependency updates and changes merged during the week.
#
# Triggers:
# - Weekly: Every Monday at 10:30 AM Mexico City time (after Dependabot updates)
# - Manual: workflow_dispatch for on-demand releases
#
# Strategy:
# - Single draft release maintained throughout the week
# - Updates existing draft with new changes instead of creating duplicates
# - Minimum 7 days between published releases (prevents spam)
# - Security fixes trigger immediate release (bypass 7-day rule)
# - Full test validation before updating draft
# - Automatic PATCH version increment for dependency updates
#
# IMPORTANT: This workflow ONLY runs on schedule or manual trigger.
# It does NOT run on push events to avoid creating multiple drafts.
#
# @package SilverAssist\Security
# @since 1.1.14
# @author Silver Assist

name: Weekly Draft Release

on:
  # Scheduled: Every Monday 10:30 AM Mexico City (after Dependabot runs at 9:00-10:00)
  schedule:
    - cron: "30 16 * * 1" # 16:30 UTC = 10:30 AM Mexico City
  
  # Manual trigger for on-demand releases
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force release creation (bypass 7-day minimum)"
        required: false
        type: boolean
        default: false
      release_type:
        description: "Release type (patch/minor/major)"
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      update_existing:
        description: "Update existing draft instead of creating new one"
        required: false
        type: boolean
        default: true

# Permissions needed for creating releases and tags
permissions:
  contents: write
  pull-requests: read

jobs:
  check-release-criteria:
    name: Check Release Criteria
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      release_type: ${{ steps.check.outputs.release_type }}
      new_version: ${{ steps.check.outputs.new_version }}
      commits_since: ${{ steps.check.outputs.commits_since }}
      days_since: ${{ steps.check.outputs.days_since }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for accurate tag detection
      
      - name: Check release criteria
        id: check
        run: |
          # Get last PUBLISHED tag (not draft)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "üìå Last published tag: $LAST_TAG"
          
          # Check for existing draft releases
          DRAFT_COUNT=$(gh release list --limit 10 | grep -c "Draft" || echo "0")
          echo "üìã Existing draft releases: $DRAFT_COUNT"
          
          # Count commits since last tag
          COMMITS_SINCE=$(git rev-list $LAST_TAG..HEAD --count)
          echo "üìù Commits since last tag: $COMMITS_SINCE"
          
          # Calculate days since last PUBLISHED release
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            DAYS_SINCE=999 # First release
            LAST_TAG_DATE="N/A"
          else
            LAST_TAG_DATE=$(git log -1 --format=%ai $LAST_TAG)
            DAYS_SINCE=$(( ($(date +%s) - $(date -d "$LAST_TAG_DATE" +%s)) / 86400 ))
          fi
          echo "üìÖ Days since last PUBLISHED release: $DAYS_SINCE"
          
          # Check for security-related commits
          SECURITY_COMMITS=$(git log $LAST_TAG..HEAD --grep="security\|CVE\|vulnerability\|\[security\]" -i --oneline | wc -l)
          echo "üîí Security commits found: $SECURITY_COMMITS"
          
          # Initialize decision variables
          SHOULD_RELEASE=false
          RELEASE_TYPE="patch"
          UPDATE_EXISTING="${{ github.event.inputs.update_existing }}"
          
          # Default to updating existing draft if not specified
          if [ -z "$UPDATE_EXISTING" ]; then
            UPDATE_EXISTING="true"
          fi
          
          # Determine release type from input or auto-detect
          if [ "${{ github.event.inputs.release_type }}" != "" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            echo "üìã Release type from input: $RELEASE_TYPE"
          fi
          
          # Criterio 1: Security update (immediate draft update, bypass time rules)
          if [ $SECURITY_COMMITS -gt 0 ]; then
            SHOULD_RELEASE=true
            RELEASE_TYPE="patch"
            echo "‚úÖ CRITERION 1 MET: Security commits detected - update draft immediately"
          
          # Criterio 2: Manual workflow dispatch with force flag
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            if [ $COMMITS_SINCE -gt 0 ]; then
              SHOULD_RELEASE=true
              echo "‚úÖ CRITERION 2 MET: Manual forced release with changes"
            else
              echo "‚ùå CRITERION 2 FAILED: Manual forced release requested but no commits to release"
            fi
          
          # Criterio 3: Scheduled weekly release (always update draft if there are changes)
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            if [ $COMMITS_SINCE -gt 0 ]; then
              SHOULD_RELEASE=true
              echo "‚úÖ CRITERION 3 MET: Scheduled update - $COMMITS_SINCE commits to add to draft"
            else
              echo "‚ÑπÔ∏è  CRITERION 3 NOT MET: No commits since last tag - nothing to add to draft"
            fi
          
          # Criterio 4: Manual workflow dispatch without force (update draft if changes exist)
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ $COMMITS_SINCE -gt 0 ]; then
              SHOULD_RELEASE=true
              echo "‚úÖ CRITERION 4 MET: Manual update - $COMMITS_SINCE commits to add to draft"
            else
              echo "‚ÑπÔ∏è  CRITERION 4 NOT MET: No commits since last tag"
            fi
          
          else
            echo "‚ÑπÔ∏è  No release criteria met - skipping draft update"
          fi
          
          # Calculate new version if release should be created/updated
          NEW_VERSION=""
          if [ "$SHOULD_RELEASE" = "true" ]; then
            # Check if we should update existing draft
            if [ "$UPDATE_EXISTING" = "true" ] && [ $DRAFT_COUNT -gt 0 ]; then
              # Get version from existing draft
              DRAFT_VERSION=$(gh release list --limit 10 | grep "Draft" | head -1 | awk '{print $3}')
              NEW_VERSION=${DRAFT_VERSION#v}
              echo "üîÑ Will update existing draft: v$NEW_VERSION"
            else
              # Calculate new version
              CURRENT_VERSION=${LAST_TAG#v}
              IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
              MAJOR=${VERSION_PARTS[0]:-0}
              MINOR=${VERSION_PARTS[1]:-0}
              PATCH=${VERSION_PARTS[2]:-0}
              
              case "$RELEASE_TYPE" in
                major)
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                minor)
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                patch)
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "üéØ Will create new draft: v$NEW_VERSION (type: $RELEASE_TYPE)"
            fi
          fi
          
          # Output results
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "commits_since=$COMMITS_SINCE" >> $GITHUB_OUTPUT
          echo "days_since=$DAYS_SINCE" >> $GITHUB_OUTPUT
          echo "update_existing=$UPDATE_EXISTING" >> $GITHUB_OUTPUT
          echo "draft_count=$DRAFT_COUNT" >> $GITHUB_OUTPUT
          
          # Summary
          echo ""
          echo "üìä ============================================"
          echo "üìä DRAFT RELEASE DECISION SUMMARY"
          echo "üìä ============================================"
          echo "üìä Last published tag: $LAST_TAG ($LAST_TAG_DATE)"
          echo "üìä Existing drafts: $DRAFT_COUNT"
          echo "üìä Commits since tag: $COMMITS_SINCE"
          echo "üìä Days since publish: $DAYS_SINCE"
          echo "üìä Security commits: $SECURITY_COMMITS"
          echo "üìä Should update: $SHOULD_RELEASE"
          echo "üìä Update existing: $UPDATE_EXISTING"
          echo "üìä Release type: $RELEASE_TYPE"
          [ -n "$NEW_VERSION" ] && echo "üìä Version: v$NEW_VERSION"
          echo "üìä ============================================"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-changes:
    name: Validate All Changes
    needs: check-release-criteria
    if: needs.check-release-criteria.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php: ["8.3"]
        wordpress: ["latest"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
      
      - name: Validate composer.json
        run: composer validate --strict
      
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction
      
      - name: üîß Run Complete Quality Checks
        run: |
          # Use unified quality checks script for consistency
          chmod +x scripts/run-quality-checks.sh
          ./scripts/run-quality-checks.sh --skip-tests || {
            echo "‚ùå Quality checks failed - release validation incomplete"
            exit 1
          }
          echo "‚úÖ All quality checks passed - ready for release"
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build assets
        run: npm run build
      
      - name: Verify minified files exist
        run: |
          echo "Checking for minified CSS files..."
          ls -la assets/css/*.min.css
          echo "Checking for minified JS files..."
          ls -la assets/js/*.min.js
      
      - name: Security audit (Composer)
        run: composer audit || echo "‚ö†Ô∏è  Composer audit found issues - review required"
      
      - name: Security audit (npm)
        run: npm audit --audit-level=moderate || echo "‚ö†Ô∏è  npm audit found issues - review required"

  create-or-update-draft:
    name: Create or Update Draft Release
    needs: [check-release-criteria, validate-changes]
    if: needs.check-release-criteria.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for existing draft
        id: check_draft
        run: |
          # Check if draft already exists
          DRAFT_EXISTS=$(gh release list --limit 10 | grep "Draft" | head -1 || echo "")
          
          if [ -n "$DRAFT_EXISTS" ]; then
            DRAFT_TAG=$(echo "$DRAFT_EXISTS" | awk '{print $3}')
            echo "Found existing draft: $DRAFT_TAG"
            echo "draft_exists=true" >> $GITHUB_OUTPUT
            echo "draft_tag=$DRAFT_TAG" >> $GITHUB_OUTPUT
            
            # Check if we should update it
            if [ "${{ needs.check-release-criteria.outputs.update_existing }}" = "true" ]; then
              echo "Will update existing draft"
              echo "should_update=true" >> $GITHUB_OUTPUT
            else
              echo "Will delete and recreate draft"
              echo "should_update=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No existing draft found - will create new one"
            echo "draft_exists=false" >> $GITHUB_OUTPUT
            echo "should_update=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Delete existing draft if needed
        if: steps.check_draft.outputs.draft_exists == 'true' && steps.check_draft.outputs.should_update == 'false'
        run: |
          DRAFT_TAG="${{ steps.check_draft.outputs.draft_tag }}"
          echo "Deleting existing draft release: $DRAFT_TAG"
          gh release delete "$DRAFT_TAG" --yes --cleanup-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Update version in files (only if creating new draft)
        if: steps.check_draft.outputs.should_update == 'false'
        run: |
          NEW_VERSION="${{ needs.check-release-criteria.outputs.new_version }}"
          echo "üìù Updating version to $NEW_VERSION in all files..."
          
          # Use the existing update-version-simple.sh script with --no-confirm flag
          chmod +x scripts/update-version-simple.sh
          ./scripts/update-version-simple.sh $NEW_VERSION --no-confirm
      
      - name: Generate CHANGELOG
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEW_VERSION="v${{ needs.check-release-criteria.outputs.new_version }}"
          
          echo "Generating changelog from $LAST_TAG to HEAD..."
          
          # Create changelog file
          CHANGELOG_FILE="RELEASE_NOTES.md"
          
          echo "## üöÄ What's Changed in $NEW_VERSION" > $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          
          # Count different types of changes
          DEPENDENCY_CHANGES=$(git log $LAST_TAG..HEAD --oneline --grep="üîß\|dependencies\|Bump" -i | wc -l)
          BUG_FIXES=$(git log $LAST_TAG..HEAD --oneline --grep="üêõ\|fix\|Fix" -i | wc -l)
          FEATURES=$(git log $LAST_TAG..HEAD --oneline --grep="‚ú®\|feat\|Feature" -i | wc -l)
          SECURITY=$(git log $LAST_TAG..HEAD --oneline --grep="üîí\|security\|CVE" -i | wc -l)
          
          # Dependency updates
          if [ $DEPENDENCY_CHANGES -gt 0 ]; then
            echo "### üîß Dependencies ($DEPENDENCY_CHANGES updates)" >> $CHANGELOG_FILE
            git log $LAST_TAG..HEAD --oneline --grep="üîß\|dependencies\|Bump" -i | sed 's/^[a-f0-9]* /- /' >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
          fi
          
          # Security fixes
          if [ $SECURITY -gt 0 ]; then
            echo "### üîí Security ($SECURITY fixes)" >> $CHANGELOG_FILE
            git log $LAST_TAG..HEAD --oneline --grep="üîí\|security\|CVE" -i | sed 's/^[a-f0-9]* /- /' >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
          fi
          
          # Bug fixes
          if [ $BUG_FIXES -gt 0 ]; then
            echo "### üêõ Bug Fixes ($BUG_FIXES fixes)" >> $CHANGELOG_FILE
            git log $LAST_TAG..HEAD --oneline --grep="üêõ\|fix\|Fix" -i | sed 's/^[a-f0-9]* /- /' >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
          fi
          
          # New features
          if [ $FEATURES -gt 0 ]; then
            echo "### ‚ú® Features ($FEATURES new)" >> $CHANGELOG_FILE
            git log $LAST_TAG..HEAD --oneline --grep="‚ú®\|feat\|Feature" -i | sed 's/^[a-f0-9]* /- /' >> $CHANGELOG_FILE
            echo "" >> $CHANGELOG_FILE
          fi
          
          # Other changes
          echo "### üìù Other Changes" >> $CHANGELOG_FILE
          git log $LAST_TAG..HEAD --oneline --invert-grep --grep="üîß\|üêõ\|‚ú®\|üîí" -i | sed 's/^[a-f0-9]* /- /' >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          
          # Add statistics
          echo "---" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...$NEW_VERSION" >> $CHANGELOG_FILE
          echo "" >> $CHANGELOG_FILE
          echo "üìä **Statistics:**" >> $CHANGELOG_FILE
          echo "- ${{ needs.check-release-criteria.outputs.commits_since }} commits" >> $CHANGELOG_FILE
          echo "- ${{ needs.check-release-criteria.outputs.days_since }} days since last release" >> $CHANGELOG_FILE
          echo "- $DEPENDENCY_CHANGES dependency updates" >> $CHANGELOG_FILE
          [ $SECURITY -gt 0 ] && echo "- üîí $SECURITY security fixes" >> $CHANGELOG_FILE
          [ $BUG_FIXES -gt 0 ] && echo "- $BUG_FIXES bug fixes" >> $CHANGELOG_FILE
          [ $FEATURES -gt 0 ] && echo "- $FEATURES new features" >> $CHANGELOG_FILE
          
          # Output changelog content
          echo "üìã Release notes preview:"
          cat $CHANGELOG_FILE
          
          # Save for next step
          echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
      
      - name: Commit version changes (only if creating new draft)
        if: steps.check_draft.outputs.should_update == 'false'
        run: |
          NEW_VERSION="${{ needs.check-release-criteria.outputs.new_version }}"
          RELEASE_TYPE="${{ needs.check-release-criteria.outputs.release_type }}"
          
          git add -A
          git commit -m "üöÄ Prepare release v$NEW_VERSION" -m "Automated $RELEASE_TYPE version bump for weekly release." -m "- Version updated in all plugin files" -m "- CHANGELOG generated from commits" -m "- All tests passing" -m "- Ready for release" || echo "No changes to commit"
          
          git push origin main
      
      - name: Create or update Git tag
        run: |
          NEW_VERSION="v${{ needs.check-release-criteria.outputs.new_version }}"
          
          # Check if tag exists
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists - will update it"
            git tag -d "$NEW_VERSION"
            git push origin --delete "$NEW_VERSION" || echo "Remote tag doesn't exist"
          fi
          
          # Create new tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
      
      - name: Create or Update Draft Release
        run: |
          NEW_VERSION="v${{ needs.check-release-criteria.outputs.new_version }}"
          DRAFT_EXISTS="${{ steps.check_draft.outputs.draft_exists }}"
          SHOULD_UPDATE="${{ steps.check_draft.outputs.should_update }}"
          
          if [ "$DRAFT_EXISTS" = "true" ] && [ "$SHOULD_UPDATE" = "true" ]; then
            # Update existing draft
            echo "Updating existing draft release $NEW_VERSION with new changes..."
            gh release edit "$NEW_VERSION" \
              --notes-file RELEASE_NOTES.md \
              --draft \
              --title "v${{ needs.check-release-criteria.outputs.new_version }}"
            echo "‚úÖ Draft release updated successfully"
          else
            # Create new draft
            echo "Creating new draft release $NEW_VERSION..."
            gh release create "$NEW_VERSION" \
              --draft \
              --title "v${{ needs.check-release-criteria.outputs.new_version }}" \
              --notes-file RELEASE_NOTES.md
            echo "‚úÖ Draft release created successfully"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        run: |
          DRAFT_EXISTS="${{ steps.check_draft.outputs.draft_exists }}"
          SHOULD_UPDATE="${{ steps.check_draft.outputs.should_update }}"
          NEW_VERSION="v${{ needs.check-release-criteria.outputs.new_version }}"
          
          echo "## üéâ Draft Release Updated!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DRAFT_EXISTS" = "true" ] && [ "$SHOULD_UPDATE" = "true" ]; then
            echo "**Action:** Updated existing draft" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Action:** Created new draft" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Version:** $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ needs.check-release-criteria.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commits:** ${{ needs.check-release-criteria.outputs.commits_since }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All validation checks passed" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DRAFT_EXISTS" = "false" ] || [ "$SHOULD_UPDATE" = "false" ]; then
            echo "‚úÖ Version updated in all files" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "‚úÖ Git tag created/updated" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Draft release updated with latest changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üëâ **Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "2. Edit release notes if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Publish the release when ready (recommended: every 7+ days)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ÑπÔ∏è  **Note:** This workflow maintains a single draft release." >> $GITHUB_STEP_SUMMARY
          echo "New commits will update the existing draft automatically every Monday." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View Draft Release](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
