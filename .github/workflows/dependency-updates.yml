name: Dependency Updates Check

on:
  # Run every Monday at 9:00 AM Mexico City time
  schedule:
    - cron: '0 15 * * 1'  # 15:00 UTC = 9:00 AM Mexico City
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run when Dependabot creates PRs
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  check-composer-updates:
    name: Check Composer Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, json
          coverage: none
      
      - name: Validate composer.json and composer.lock
        run: composer validate --strict
      
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction
      
      - name: Check for Composer updates
        id: composer-outdated
        run: |
          echo "Checking for outdated Composer packages..."
          composer outdated --direct --format=json > composer-outdated.json || echo '{"installed":[]}' > composer-outdated.json
          
          # Check if there are outdated packages
          OUTDATED_COUNT=$(jq '.installed | length' composer-outdated.json)
          echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "## üì¶ Outdated Composer Packages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Latest | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.installed[] | "| \(.name) | \(.version) | \(.latest) | \(."latest-status") |"' composer-outdated.json >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ All Composer packages are up to date!" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: üîß Run Quality Validation (PHPStan + PHPCS)
        run: |
          # Run PHPStan and PHPCS without blocking the workflow
          # (dependency updates shouldn't fail if code quality needs improvement)
          composer phpstan || echo "‚ö†Ô∏è PHPStan found issues - review recommended"
          composer phpcs || echo "‚ö†Ô∏è PHPCS found issues - review recommended"
      
      - name: Upload Composer outdated report
        if: steps.composer-outdated.outputs.outdated_count > 0
        uses: actions/upload-artifact@v4
        with:
          name: composer-outdated-report
          path: composer-outdated.json
          retention-days: 30

  check-npm-updates:
    name: Check npm Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for npm updates
        id: npm-outdated
        run: |
          echo "Checking for outdated npm packages..."
          npm outdated --json > npm-outdated.json || true
          
          # Check if there are outdated packages
          if [ -s npm-outdated.json ] && [ "$(cat npm-outdated.json)" != "{}" ]; then
            echo "has_outdated=true" >> $GITHUB_OUTPUT
            
            echo "## üì¶ Outdated npm Packages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Current | Wanted | Latest |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Parse JSON and create table
            node -e "
              const outdated = require('./npm-outdated.json');
              Object.keys(outdated).forEach(pkg => {
                const info = outdated[pkg];
                console.log(\`| \${pkg} | \${info.current} | \${info.wanted} | \${info.latest} |\`);
              });
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "has_outdated=false" >> $GITHUB_OUTPUT
            echo "## ‚úÖ All npm packages are up to date!" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Run build
        run: npm run build
      
      - name: Verify minified files exist
        run: |
          echo "Checking for minified files..."
          test -f assets/css/admin.min.css || echo "‚ùå Missing: admin.min.css"
          test -f assets/css/password-validation.min.css || echo "‚ùå Missing: password-validation.min.css"
          test -f assets/css/variables.min.css || echo "‚ùå Missing: variables.min.css"
          test -f assets/js/admin.min.js || echo "‚ùå Missing: admin.min.js"
          test -f assets/js/password-validation.min.js || echo "‚ùå Missing: password-validation.min.js"
          test -f assets/js/update-check.min.js || echo "‚ùå Missing: update-check.min.js"
      
      - name: Upload npm outdated report
        if: steps.npm-outdated.outputs.has_outdated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: npm-outdated-report
          path: npm-outdated.json
          retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
      
      - name: Composer security audit
        run: |
          echo "## üîí Composer Security Audit" >> $GITHUB_STEP_SUMMARY
          composer audit --format=json > composer-audit.json || true
          
          if [ -s composer-audit.json ]; then
            VULNERABILITIES=$(jq '.advisories | length' composer-audit.json)
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found $VULNERABILITIES security advisories" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
      
      - name: npm security audit
        run: |
          echo "## üîí npm Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --json > npm-audit.json || true
          
          if [ -s npm-audit.json ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length' npm-audit.json)
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "‚ö†Ô∏è Found vulnerabilities in npm packages" >> $GITHUB_STEP_SUMMARY
              jq -r '.metadata.vulnerabilities | to_entries[] | select(.value > 0) | "- \(.key): \(.value)"' npm-audit.json >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-reports
          path: |
            composer-audit.json
            npm-audit.json
          retention-days: 90

  auto-merge-dependabot:
    name: Auto-merge Dependabot PRs
    needs: [check-composer-updates, check-npm-updates, security-audit]
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && success()
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Auto-approve PR
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||
          steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Enable auto-merge
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||
          steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment on major version updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-major'
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ö†Ô∏è Major Version Update Detected
              
              This PR contains a **major version update** that may include breaking changes.
              
              **Manual review required** - Please review the changelog and test thoroughly before merging.
              
              Package: \`${{ steps.metadata.outputs.dependency-names }}\`
              Update: \`${{ steps.metadata.outputs.previous-version }}\` ‚Üí \`${{ steps.metadata.outputs.new-version }}\``
            });
